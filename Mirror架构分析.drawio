<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36" version="24.7.8">
  <diagram name="第 1 页" id="7UJenC19HOIE5kEgkeHc">
    <mxGraphModel dx="2261" dy="1927" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="eoro2AQ4aJLVT_-DZN7c-3" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="eoro2AQ4aJLVT_-DZN7c-1" target="eoro2AQ4aJLVT_-DZN7c-2">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="eoro2AQ4aJLVT_-DZN7c-1" value="编译完成后" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-80" y="230" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="eoro2AQ4aJLVT_-DZN7c-2" value="修改带有Commond,TargetRpc,ClientRpc标签的函数到IL代码" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="190" y="230" width="390" height="60" as="geometry" />
        </mxCell>
        <mxCell id="eoro2AQ4aJLVT_-DZN7c-6" value="&lt;h1 style=&quot;margin-top: 0px;&quot;&gt;&lt;div style=&quot;background-color:#262626;color:#d0d0d0&quot;&gt;&lt;pre style=&quot;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;// generates code like:&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;public void CmdThrust(float thrusting, int spin)&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;{&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    NetworkWriter networkWriter = new NetworkWriter();&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    networkWriter.Write(thrusting);&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    networkWriter.WritePackedUInt32((uint)spin);&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    base.SendCommandInternal(cmdName, networkWriter, cmdName);&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;}&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;public void CallCmdThrust(float thrusting, int spin)&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;{&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    // whatever the user was doing before&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;}&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;Originally HLAPI put the send message code inside the Call function&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;and then proceeded to replace every call to CmdTrust with CallCmdTrust&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;This method moves all the user&#39;s code into the &quot;CallCmd&quot; method&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;and replaces the body of the original method with the send message code.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;This way we do not need to modify the code anywhere else,  and this works&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;correctly in dependent assemblies&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;" style="text;html=1;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="690" y="-150" width="580" height="370" as="geometry" />
        </mxCell>
        <mxCell id="eoro2AQ4aJLVT_-DZN7c-7" value="&lt;h1 style=&quot;margin-top: 0px;&quot;&gt;&lt;div style=&quot;background-color:#262626;color:#d0d0d0&quot;&gt;&lt;pre style=&quot;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;/* generates code like:&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    public void TargetTest (NetworkConnection conn, int param)&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    {&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;        NetworkWriter writer = new NetworkWriter ();&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;        writer.WritePackedUInt32 ((uint)param);&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;        base.SendTargetRPCInternal (conn, typeof(class), &quot;TargetTest&quot;, val);&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    }&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    public void CallTargetTest (NetworkConnection conn, int param)&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    {&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;        // whatever the user did before&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    }&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    or if optional:&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    public void TargetTest (int param)&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    {&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;        NetworkWriter writer = new NetworkWriter ();&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;        writer.WritePackedUInt32 ((uint)param);&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;        base.SendTargetRPCInternal (null, typeof(class), &quot;TargetTest&quot;, val);&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    }&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    public void CallTargetTest (int param)&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    {&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;        // whatever the user did before&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    }&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    Originally HLAPI put the send message code inside the Call function&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    and then proceeded to replace every call to TargetTest with CallTargetTest&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    This method moves all the user&#39;s code into the &quot;CallTargetRpc&quot; method&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    and replaces the body of the original method with the send message code.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    This way we do not need to modify the code anywhere else,  and this works&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    correctly in dependent assemblies&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;" style="text;html=1;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="690" y="280" width="630" height="510" as="geometry" />
        </mxCell>
        <mxCell id="eoro2AQ4aJLVT_-DZN7c-8" value="&lt;h1 style=&quot;margin-top: 0px;&quot;&gt;&lt;div style=&quot;background-color:#262626;color:#d0d0d0&quot;&gt;&lt;pre style=&quot;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;/*&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt; * generates code like:&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    public void RpcTest (int param)&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    {&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;        NetworkWriter writer = new NetworkWriter ();&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;        writer.WritePackedUInt32((uint)param);&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;        base.SendRPCInternal(typeof(class),&quot;RpcTest&quot;, writer, 0);&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    }&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    public void CallRpcTest (int param)&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    {&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;        // whatever the user did before&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    }&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    Originally HLAPI put the send message code inside the Call function&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    and then proceeded to replace every call to RpcTest with CallRpcTest&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    This method moves all the user&#39;s code into the &quot;CallRpc&quot; method&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    and replaces the body of the original method with the send message code.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    This way we do not need to modify the code anywhere else,  and this works&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;    correctly in dependent assemblies&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(133, 196, 108);&quot;&gt;*/&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;" style="text;html=1;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="695" y="850" width="620" height="370" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
